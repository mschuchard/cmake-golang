# This file sets the basic flags for the GO language in CMake.
# It also loads the available platform file for the system-compiler
# if it exists.

IF(CMAKE_GO_PACK)
  SET(CMAKE_GO_OUTPUT_EXTENSION .o)
ELSE(CMAKE_GO_PACK)
  SET(CMAKE_GO_OUTPUT_EXTENSION .a)
ENDIF(CMAKE_GO_PACK)

SET(_INCLUDED_FILE 0)

# Load compiler-specific information.
IF(CMAKE_GO_COMPILER_ID)
  INCLUDE(Compiler/${CMAKE_GO_COMPILER_ID}-GO OPTIONAL)
ENDIF(CMAKE_GO_COMPILER_ID)

SET(CMAKE_BASE_NAME)
GET_FILENAME_COMPONENT(CMAKE_BASE_NAME ${CMAKE_GO_COMPILER} NAME_WE)
# since the gnu compiler has several names force GNUGO
IF(CMAKE_COMPILER_IS_GNUGO)
  SET(CMAKE_BASE_NAME GO)
ENDIF(CMAKE_COMPILER_IS_GNUGO)


# load a hardware specific file, mostly useful for embedded compilers
IF(CMAKE_GO_COMPILER_ID)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_GO_COMPILER_ID}-GO OPTIONAL RESULT_VARIABLE _INCLUDED_FILE)
ENDIF(CMAKE_GO_COMPILER_ID)
IF (NOT _INCLUDED_FILE)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_BASE_NAME} OPTIONAL)
ENDIF (NOT _INCLUDED_FILE)

# load the system- and compiler specific files
IF(CMAKE_GO_COMPILER_ID)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_GO_COMPILER_ID}-GO OPTIONAL RESULT_VARIABLE _INCLUDED_FILE)
ENDIF(CMAKE_GO_COMPILER_ID)
IF (NOT _INCLUDED_FILE)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_BASE_NAME} OPTIONAL
          RESULT_VARIABLE _INCLUDED_FILE)
ENDIF (NOT _INCLUDED_FILE)
# We specify the compiler information in the system file for some
# platforms, but this language may not have been enabled when the file
# was first included.  Include it again to get the language info.
# Remove this when all compiler info is removed from system files.
IF (NOT _INCLUDED_FILE)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME} OPTIONAL)
ENDIF (NOT _INCLUDED_FILE)


# This should be included before the _INIT variables are
# used to initialize the cache.  Since the rule variables
# have if blocks on them, users can still define them here.
# But, it should still be after the platform file so changes can
# be made to those values.

IF(CMAKE_USER_MAKE_RULES_OVERRIDE)
  # Save the full path of the file so try_compile can use it.
  INCLUDE(${CMAKE_USER_MAKE_RULES_OVERRIDE} RESULT_VARIABLE _override)
  SET(CMAKE_USER_MAKE_RULES_OVERRIDE "${_override}")
ENDIF()

IF(CMAKE_USER_MAKE_RULES_OVERRIDE_GO)
  # Save the full path of the file so try_compile can use it.
  INCLUDE(${CMAKE_USER_MAKE_RULES_OVERRIDE_GO} RESULT_VARIABLE _override)
  SET(CMAKE_USER_MAKE_RULES_OVERRIDE_GO "${_override}")
ENDIF()

# Create a set of shared library variable specific to GO
# For 90% of the systems, these are the same flags as the GO versions
# so if these are not set just copy the flags from the GO version
IF(NOT CMAKE_SHARED_LIBRARY_CREATE_GO_FLAGS)
  SET(CMAKE_SHARED_LIBRARY_CREATE_GO_FLAGS ${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS})
ENDIF(NOT CMAKE_SHARED_LIBRARY_CREATE_GO_FLAGS)

IF(NOT CMAKE_SHARED_LIBRARY_GO_FLAGS)
  SET(CMAKE_SHARED_LIBRARY_GO_FLAGS ${CMAKE_SHARED_LIBRARY_C_FLAGS})
ENDIF(NOT CMAKE_SHARED_LIBRARY_GO_FLAGS)

IF(NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_GO_FLAGS)
  SET(CMAKE_SHARED_LIBRARY_LINK_GO_FLAGS ${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS})
ENDIF(NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_GO_FLAGS)

IF(NOT CMAKE_SHARED_LIBRARY_RUNTIME_GO_FLAG)
  SET(CMAKE_SHARED_LIBRARY_RUNTIME_GO_FLAG ${CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG})
ENDIF(NOT CMAKE_SHARED_LIBRARY_RUNTIME_GO_FLAG)

IF(NOT CMAKE_SHARED_LIBRARY_RUNTIME_GO_FLAG_SEP)
  SET(CMAKE_SHARED_LIBRARY_RUNTIME_GO_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP})
ENDIF(NOT CMAKE_SHARED_LIBRARY_RUNTIME_GO_FLAG_SEP)

IF(NOT CMAKE_SHARED_LIBRARY_RPATH_LINK_GO_FLAG)
  SET(CMAKE_SHARED_LIBRARY_RPATH_LINK_GO_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_C_FLAG})
ENDIF(NOT CMAKE_SHARED_LIBRARY_RPATH_LINK_GO_FLAG)

IF(NOT DEFINED CMAKE_EXE_EXPORTS_GO_FLAG)
  SET(CMAKE_EXE_EXPORTS_GO_FLAG ${CMAKE_EXE_EXPORTS_C_FLAG})
ENDIF()

IF(NOT DEFINED CMAKE_SHARED_LIBRARY_SONAME_GO_FLAG)
  SET(CMAKE_SHARED_LIBRARY_SONAME_GO_FLAG ${CMAKE_SHARED_LIBRARY_SONAME_C_FLAG})
ENDIF()

IF(NOT DEFINED CMAKE_SHARED_MODULE_CREATE_GO_FLAGS)
  SET(CMAKE_SHARED_MODULE_CREATE_GO_FLAGS ${CMAKE_SHARED_MODULE_CREATE_C_FLAGS})
ENDIF()

IF(NOT DEFINED CMAKE_SHARED_MODULE_GO_FLAGS)
  SET(CMAKE_SHARED_MODULE_GO_FLAGS ${CMAKE_SHARED_MODULE_C_FLAGS})
ENDIF()

IF(NOT CMAKE_EXECUTABLE_RUNTIME_GO_FLAG)
  SET(CMAKE_EXECUTABLE_RUNTIME_GO_FLAG ${CMAKE_SHARED_LIBRARY_RUNTIME_GO_FLAG})
ENDIF(NOT CMAKE_EXECUTABLE_RUNTIME_GO_FLAG)

IF(NOT CMAKE_EXECUTABLE_RUNTIME_GO_FLAG_SEP)
  SET(CMAKE_EXECUTABLE_RUNTIME_GO_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_GO_FLAG_SEP})
ENDIF(NOT CMAKE_EXECUTABLE_RUNTIME_GO_FLAG_SEP)

IF(NOT CMAKE_EXECUTABLE_RPATH_LINK_GO_FLAG)
  SET(CMAKE_EXECUTABLE_RPATH_LINK_GO_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_GO_FLAG})
ENDIF(NOT CMAKE_EXECUTABLE_RPATH_LINK_GO_FLAG)

IF(NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_GO_WITH_RUNTIME_PATH)
  SET(CMAKE_SHARED_LIBRARY_LINK_GO_WITH_RUNTIME_PATH ${CMAKE_SHARED_LIBRARY_LINK_C_WITH_RUNTIME_PATH})
ENDIF(NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_GO_WITH_RUNTIME_PATH)

IF(NOT CMAKE_INCLUDE_FLAG_GO)
  SET(CMAKE_INCLUDE_FLAG_GO ${CMAKE_INCLUDE_FLAG_C})
ENDIF(NOT CMAKE_INCLUDE_FLAG_GO)

IF(NOT CMAKE_INCLUDE_FLAG_SEP_GO)
  SET(CMAKE_INCLUDE_FLAG_SEP_GO ${CMAKE_INCLUDE_FLAG_SEP_C})
ENDIF(NOT CMAKE_INCLUDE_FLAG_SEP_GO)

# repeat for modules
IF(NOT CMAKE_SHARED_MODULE_CREATE_GO_FLAGS)
  SET(CMAKE_SHARED_MODULE_CREATE_GO_FLAGS ${CMAKE_SHARED_MODULE_CREATE_C_FLAGS})
ENDIF(NOT CMAKE_SHARED_MODULE_CREATE_GO_FLAGS)

IF(NOT CMAKE_SHARED_MODULE_GO_FLAGS)
  SET(CMAKE_SHARED_MODULE_GO_FLAGS ${CMAKE_SHARED_MODULE_C_FLAGS})
ENDIF(NOT CMAKE_SHARED_MODULE_GO_FLAGS)

SET(CMAKE_VERBOSE_MAKEFILE FALSE CACHE BOOL "If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.")

# add the flags to the cache based
# on the initial values computed in the platform/*.cmake files
# use _INIT variables so that this only happens the first time
# and you can set these flags in the cmake cache
SET(CMAKE_GO_FLAGS_INIT "$ENV{AFLAGS} ${CMAKE_GO_FLAGS_INIT}")
# avoid just having a space as the initial value for the cache
IF(CMAKE_GO_FLAGS_INIT STREQUAL " ")
  SET(CMAKE_GO_FLAGS_INIT)
ENDIF(CMAKE_GO_FLAGS_INIT STREQUAL " ")
SET (CMAKE_GO_FLAGS "${CMAKE_GO_FLAGS_INIT}" CACHE STRING
     "Flags used by the compiler during all build types.")

INCLUDE(CMakeCommonLanguageInclude)

# now define the following rules:
# CMAKE_GO_CREATE_SHARED_LIBRARY
# CMAKE_GO_CREATE_SHARED_MODULE
# CMAKE_GO_COMPILE_OBJECT
# CMAKE_GO_LINK_EXECUTABLE

# create a shared GO library
IF(NOT CMAKE_GO_CREATE_SHARED_LIBRARY)
  SET(CMAKE_GO_CREATE_SHARED_LIBRARY)
ENDIF(NOT CMAKE_GO_CREATE_SHARED_LIBRARY)

# create a GO shared module copy the shared library rule by default
IF(NOT CMAKE_GO_CREATE_SHARED_MODULE)
  SET(CMAKE_GO_CREATE_SHARED_MODULE ${CMAKE_GO_CREATE_SHARED_LIBRARY})
ENDIF(NOT CMAKE_GO_CREATE_SHARED_MODULE)


# Create a static archive incrementally for large object file counts.
# If CMAKE_GO_CREATE_STATIC_LIBRARY is set it will override these.
IF(NOT DEFINED CMAKE_GO_ARCHIVE_CREATE)
  SET(CMAKE_GO_ARCHIVE_CREATE "<CMAKE_AR> cr <TARGET> <LINK_FLAGS> <OBJECTS>")
ENDIF()
IF(NOT DEFINED CMAKE_GO_ARCHIVE_APPEND)
  SET(CMAKE_GO_ARCHIVE_APPEND "<CMAKE_AR> r <TARGET> <LINK_FLAGS> <OBJECTS>")
ENDIF()
IF(NOT DEFINED CMAKE_GO_ARCHIVE_FINISH)
  SET(CMAKE_GO_ARCHIVE_FINISH "<CMAKE_RANLIB> <TARGET>")
ENDIF()

# compile a GO file into an object file
IF(NOT CMAKE_GO_COMPILE_OBJECT)
  SET(CMAKE_GO_COMPILE_OBJECT
  "<CMAKE_GO_COMPILER> tool compile <FLAGS> <SOURCE> -o <OBJECT>")
ENDIF(NOT CMAKE_GO_COMPILE_OBJECT)

# link a GO archive or object into an executable binary
IF(NOT CMAKE_GO_LINK_EXECUTABLE)
  SET(CMAKE_GO_LINK_EXECUTABLE
  "${CMAKE_GO_LINKER} tool link <LINK_FLAGS> -s -w <OBJECTS> -o <TARGET>")
ENDIF(NOT CMAKE_GO_LINK_EXECUTABLE)

IF(CMAKE_GO_STANDARD_LIBRARIES_INIT)
  SET(CMAKE_GO_STANDARD_LIBRARIES "${CMAKE_GO_STANDARD_LIBRARIES_INIT}"
    CACHE STRING "Libraries linked by defalut with all GO applications.")
  MARK_AS_ADVANCED(CMAKE_GO_STANDARD_LIBRARIES)
ENDIF(CMAKE_GO_STANDARD_LIBRARIES_INIT)

IF(NOT CMAKE_NOT_USING_CONFIG_FLAGS)
  SET (CMAKE_GO_FLAGS_DEBUG "${CMAKE_GO_FLAGS_DEBUG_INIT}" CACHE STRING
     "Flags used by the compiler during debug builds.")
  SET (CMAKE_GO_FLAGS_MINSIZEREL "${CMAKE_GO_FLAGS_MINSIZEREL_INIT}" CACHE STRING
      "Flags used by the compiler during release minsize builds.")
  SET (CMAKE_GO_FLAGS_RELEASE "${CMAKE_GO_FLAGS_RELEASE_INIT}" CACHE STRING
     "Flags used by the compiler during release builds (/MD /Ob1 /Oi /Ot /Oy /Gs will produce slightly less optimized but smaller files).")
  SET (CMAKE_GO_FLAGS_RELWITHDEBINFO "${CMAKE_GO_FLAGS_RELWITHDEBINFO_INIT}" CACHE STRING
     "Flags used by the compiler during Release with Debug Info builds.")
ENDIF(NOT CMAKE_NOT_USING_CONFIG_FLAGS)

MARK_AS_ADVANCED(
  CMAKE_GO_FLAGS
  CMAKE_GO_FLAGS_RELEASE
  CMAKE_GO_FLAGS_RELWITHDEBINFO
  CMAKE_GO_FLAGS_MINSIZEREL
  CMAKE_GO_FLAGS_DEBUG
)

SET(CMAKE_GO_INFORMATION_LOADED 1)
